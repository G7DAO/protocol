// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.3.5
// seer command: seer evm generate --package ERC20OrbitBridger --cli --struct ERC20OrbitBridger --output bindings/ERC20OrbitBridger/ERC20OrbitBridger.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ERC20OrbitBridger

import (
	"bytes"
	"crypto/rand"
	"errors"
	"math/big"
	"net/http"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// ERC20OrbitBridgerMetaData contains all meta data concerning the ERC20OrbitBridger contract.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var ERC20OrbitBridgerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DEFAULT_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_SUBMISSION_FEE_PERCENT_INCREASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"bridgeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"calculateRetryableSubmissionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReentrant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600f57600080fd5b50610c958061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a86ce05e11610050578063a86ce05e1461009b578063b01b29e6146100b0578063d6be695a146100cd57600080fd5b80632629955e1461006c5780638a6189ae14610088575b600080fd5b61007561012c81565b6040519081526020015b60405180910390f35b610075610096366004610950565b6100d7565b6100ae6100a93660046109f7565b610134565b005b6000546100bd9060ff1681565b604051901515815260200161007f565b610075620493e081565b600080835160066100e89190610a79565b6100f490610578610a90565b905060006101028483610a79565b90506000606461011461012c82610a90565b61011e9084610a79565b6101289190610aa3565b93505050505b92915050565b60005460ff16156101a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5265656e7472616e637947756172640000000000000000000000000000000000604482015260640160405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011781556040517fbda009fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015283169063bda009fe90602401602060405180830381865afa15801561023c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102609190610ade565b905060008273ffffffffffffffffffffffffffffffffffffffff1663fb0e722b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d39190610ade565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e78cea926040518163ffffffff1660e01b8152600401602060405180830381865afa158015610322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103469190610ade565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e1758bd86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610395573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b99190610ade565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810189905290915073ffffffffffffffffffffffffffffffffffffffff8916906323b872dd906064016020604051808303816000875af1158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190610b02565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301526024820189905289169063095ea7b3906044016020604051808303816000875af11580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190610b02565b506040517fa0c76a9600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015230602483015287811660448301526064820189905260a06084830152600060a48301819052919087169063a0c76a969060c401600060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105cd9190810190610b48565b905060006105db82486100d7565b905060006105ec48620493e0610a79565b6105f69083610a90565b905060008282604051602001610625929190918252606060208301819052600090830152604082015260800190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905073ffffffffffffffffffffffffffffffffffffffff8516156107aa576040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff8616906323b872dd906064016020604051808303816000875af11580156106ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070e9190610b02565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820184905286169063095ea7b3906044016020604051808303816000875af1158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a89190610b02565b505b8773ffffffffffffffffffffffffffffffffffffffff1663d2ce7d658d8c8e620493e048876040518763ffffffff1660e01b81526004016107f096959493929190610bbf565b6000604051808303816000875af115801561080f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108559190810190610b48565b5050600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156109025761090261088c565b604052919050565b600067ffffffffffffffff8211156109245761092461088c565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000806040838503121561096357600080fd5b823567ffffffffffffffff81111561097a57600080fd5b8301601f8101851361098b57600080fd5b803561099e6109998261090a565b6108bb565b8181528660208385010111156109b357600080fd5b8160208401602083013760006020928201830152969401359450505050565b73ffffffffffffffffffffffffffffffffffffffff811681146109f457600080fd5b50565b60008060008060808587031215610a0d57600080fd5b8435610a18816109d2565b9350602085013592506040850135610a2f816109d2565b91506060850135610a3f816109d2565b939692955090935050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761012e5761012e610a4a565b8082018082111561012e5761012e610a4a565b600082610ad9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215610af057600080fd5b8151610afb816109d2565b9392505050565b600060208284031215610b1457600080fd5b81518015158114610afb57600080fd5b60005b83811015610b3f578181015183820152602001610b27565b50506000910152565b600060208284031215610b5a57600080fd5b815167ffffffffffffffff811115610b7157600080fd5b8201601f81018413610b8257600080fd5b8051610b906109998261090a565b818152856020838501011115610ba557600080fd5b610bb6826020830160208601610b24565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff8716815273ffffffffffffffffffffffffffffffffffffffff8616602082015284604082015283606082015282608082015260c060a0820152600082518060c0840152610c288160e0850160208701610b24565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160e00197965050505050505056fea2646970667358221220320aa25865a8089816fae0a63631ed6caf657d1bc6830ab8d11b67bb62b0b15264736f6c634300081c0033",
}

// ERC20OrbitBridgerABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20OrbitBridgerMetaData.ABI instead.
var ERC20OrbitBridgerABI = ERC20OrbitBridgerMetaData.ABI

// ERC20OrbitBridgerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20OrbitBridgerMetaData.Bin instead.
var ERC20OrbitBridgerBin = ERC20OrbitBridgerMetaData.Bin

// DeployERC20OrbitBridger deploys a new Ethereum contract, binding an instance of ERC20OrbitBridger to it.
func DeployERC20OrbitBridger(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ERC20OrbitBridger, error) {
	parsed, err := ERC20OrbitBridgerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20OrbitBridgerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20OrbitBridger{ERC20OrbitBridgerCaller: ERC20OrbitBridgerCaller{contract: contract}, ERC20OrbitBridgerTransactor: ERC20OrbitBridgerTransactor{contract: contract}, ERC20OrbitBridgerFilterer: ERC20OrbitBridgerFilterer{contract: contract}}, nil
}

// ERC20OrbitBridger is an auto generated Go binding around an Ethereum contract.
type ERC20OrbitBridger struct {
	ERC20OrbitBridgerCaller     // Read-only binding to the contract
	ERC20OrbitBridgerTransactor // Write-only binding to the contract
	ERC20OrbitBridgerFilterer   // Log filterer for contract events
}

// ERC20OrbitBridgerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20OrbitBridgerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20OrbitBridgerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20OrbitBridgerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20OrbitBridgerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20OrbitBridgerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20OrbitBridgerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20OrbitBridgerSession struct {
	Contract     *ERC20OrbitBridger // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ERC20OrbitBridgerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20OrbitBridgerCallerSession struct {
	Contract *ERC20OrbitBridgerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ERC20OrbitBridgerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20OrbitBridgerTransactorSession struct {
	Contract     *ERC20OrbitBridgerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ERC20OrbitBridgerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20OrbitBridgerRaw struct {
	Contract *ERC20OrbitBridger // Generic contract binding to access the raw methods on
}

// ERC20OrbitBridgerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20OrbitBridgerCallerRaw struct {
	Contract *ERC20OrbitBridgerCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20OrbitBridgerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20OrbitBridgerTransactorRaw struct {
	Contract *ERC20OrbitBridgerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20OrbitBridger creates a new instance of ERC20OrbitBridger, bound to a specific deployed contract.
func NewERC20OrbitBridger(address common.Address, backend bind.ContractBackend) (*ERC20OrbitBridger, error) {
	contract, err := bindERC20OrbitBridger(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20OrbitBridger{ERC20OrbitBridgerCaller: ERC20OrbitBridgerCaller{contract: contract}, ERC20OrbitBridgerTransactor: ERC20OrbitBridgerTransactor{contract: contract}, ERC20OrbitBridgerFilterer: ERC20OrbitBridgerFilterer{contract: contract}}, nil
}

// NewERC20OrbitBridgerCaller creates a new read-only instance of ERC20OrbitBridger, bound to a specific deployed contract.
func NewERC20OrbitBridgerCaller(address common.Address, caller bind.ContractCaller) (*ERC20OrbitBridgerCaller, error) {
	contract, err := bindERC20OrbitBridger(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20OrbitBridgerCaller{contract: contract}, nil
}

// NewERC20OrbitBridgerTransactor creates a new write-only instance of ERC20OrbitBridger, bound to a specific deployed contract.
func NewERC20OrbitBridgerTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20OrbitBridgerTransactor, error) {
	contract, err := bindERC20OrbitBridger(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20OrbitBridgerTransactor{contract: contract}, nil
}

// NewERC20OrbitBridgerFilterer creates a new log filterer instance of ERC20OrbitBridger, bound to a specific deployed contract.
func NewERC20OrbitBridgerFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20OrbitBridgerFilterer, error) {
	contract, err := bindERC20OrbitBridger(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20OrbitBridgerFilterer{contract: contract}, nil
}

// bindERC20OrbitBridger binds a generic wrapper to an already deployed contract.
func bindERC20OrbitBridger(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20OrbitBridgerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20OrbitBridger *ERC20OrbitBridgerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20OrbitBridger.Contract.ERC20OrbitBridgerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20OrbitBridger *ERC20OrbitBridgerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20OrbitBridger.Contract.ERC20OrbitBridgerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20OrbitBridger *ERC20OrbitBridgerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20OrbitBridger.Contract.ERC20OrbitBridgerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20OrbitBridger *ERC20OrbitBridgerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20OrbitBridger.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20OrbitBridger *ERC20OrbitBridgerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20OrbitBridger.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20OrbitBridger *ERC20OrbitBridgerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20OrbitBridger.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTGASLIMIT is a free data retrieval call binding the contract method 0xd6be695a.
//
// Solidity: function DEFAULT_GAS_LIMIT() view returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerCaller) DEFAULTGASLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20OrbitBridger.contract.Call(opts, &out, "DEFAULT_GAS_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEFAULTGASLIMIT is a free data retrieval call binding the contract method 0xd6be695a.
//
// Solidity: function DEFAULT_GAS_LIMIT() view returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerSession) DEFAULTGASLIMIT() (*big.Int, error) {
	return _ERC20OrbitBridger.Contract.DEFAULTGASLIMIT(&_ERC20OrbitBridger.CallOpts)
}

// DEFAULTGASLIMIT is a free data retrieval call binding the contract method 0xd6be695a.
//
// Solidity: function DEFAULT_GAS_LIMIT() view returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerCallerSession) DEFAULTGASLIMIT() (*big.Int, error) {
	return _ERC20OrbitBridger.Contract.DEFAULTGASLIMIT(&_ERC20OrbitBridger.CallOpts)
}

// DEFAULTSUBMISSIONFEEPERCENTINCREASE is a free data retrieval call binding the contract method 0x2629955e.
//
// Solidity: function DEFAULT_SUBMISSION_FEE_PERCENT_INCREASE() view returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerCaller) DEFAULTSUBMISSIONFEEPERCENTINCREASE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20OrbitBridger.contract.Call(opts, &out, "DEFAULT_SUBMISSION_FEE_PERCENT_INCREASE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DEFAULTSUBMISSIONFEEPERCENTINCREASE is a free data retrieval call binding the contract method 0x2629955e.
//
// Solidity: function DEFAULT_SUBMISSION_FEE_PERCENT_INCREASE() view returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerSession) DEFAULTSUBMISSIONFEEPERCENTINCREASE() (*big.Int, error) {
	return _ERC20OrbitBridger.Contract.DEFAULTSUBMISSIONFEEPERCENTINCREASE(&_ERC20OrbitBridger.CallOpts)
}

// DEFAULTSUBMISSIONFEEPERCENTINCREASE is a free data retrieval call binding the contract method 0x2629955e.
//
// Solidity: function DEFAULT_SUBMISSION_FEE_PERCENT_INCREASE() view returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerCallerSession) DEFAULTSUBMISSIONFEEPERCENTINCREASE() (*big.Int, error) {
	return _ERC20OrbitBridger.Contract.DEFAULTSUBMISSIONFEEPERCENTINCREASE(&_ERC20OrbitBridger.CallOpts)
}

// CalculateRetryableSubmissionFee is a free data retrieval call binding the contract method 0x8a6189ae.
//
// Solidity: function calculateRetryableSubmissionFee(bytes _calldata, uint256 _baseFee) pure returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerCaller) CalculateRetryableSubmissionFee(opts *bind.CallOpts, _calldata []byte, _baseFee *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ERC20OrbitBridger.contract.Call(opts, &out, "calculateRetryableSubmissionFee", _calldata, _baseFee)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateRetryableSubmissionFee is a free data retrieval call binding the contract method 0x8a6189ae.
//
// Solidity: function calculateRetryableSubmissionFee(bytes _calldata, uint256 _baseFee) pure returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerSession) CalculateRetryableSubmissionFee(_calldata []byte, _baseFee *big.Int) (*big.Int, error) {
	return _ERC20OrbitBridger.Contract.CalculateRetryableSubmissionFee(&_ERC20OrbitBridger.CallOpts, _calldata, _baseFee)
}

// CalculateRetryableSubmissionFee is a free data retrieval call binding the contract method 0x8a6189ae.
//
// Solidity: function calculateRetryableSubmissionFee(bytes _calldata, uint256 _baseFee) pure returns(uint256)
func (_ERC20OrbitBridger *ERC20OrbitBridgerCallerSession) CalculateRetryableSubmissionFee(_calldata []byte, _baseFee *big.Int) (*big.Int, error) {
	return _ERC20OrbitBridger.Contract.CalculateRetryableSubmissionFee(&_ERC20OrbitBridger.CallOpts, _calldata, _baseFee)
}

// IsReentrant is a free data retrieval call binding the contract method 0xb01b29e6.
//
// Solidity: function isReentrant() view returns(bool)
func (_ERC20OrbitBridger *ERC20OrbitBridgerCaller) IsReentrant(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ERC20OrbitBridger.contract.Call(opts, &out, "isReentrant")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsReentrant is a free data retrieval call binding the contract method 0xb01b29e6.
//
// Solidity: function isReentrant() view returns(bool)
func (_ERC20OrbitBridger *ERC20OrbitBridgerSession) IsReentrant() (bool, error) {
	return _ERC20OrbitBridger.Contract.IsReentrant(&_ERC20OrbitBridger.CallOpts)
}

// IsReentrant is a free data retrieval call binding the contract method 0xb01b29e6.
//
// Solidity: function isReentrant() view returns(bool)
func (_ERC20OrbitBridger *ERC20OrbitBridgerCallerSession) IsReentrant() (bool, error) {
	return _ERC20OrbitBridger.Contract.IsReentrant(&_ERC20OrbitBridger.CallOpts)
}

// BridgeERC20 is a paid mutator transaction binding the contract method 0xa86ce05e.
//
// Solidity: function bridgeERC20(address _token, uint256 _amount, address _to, address _router) returns()
func (_ERC20OrbitBridger *ERC20OrbitBridgerTransactor) BridgeERC20(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _to common.Address, _router common.Address) (*types.Transaction, error) {
	return _ERC20OrbitBridger.contract.Transact(opts, "bridgeERC20", _token, _amount, _to, _router)
}

// BridgeERC20 is a paid mutator transaction binding the contract method 0xa86ce05e.
//
// Solidity: function bridgeERC20(address _token, uint256 _amount, address _to, address _router) returns()
func (_ERC20OrbitBridger *ERC20OrbitBridgerSession) BridgeERC20(_token common.Address, _amount *big.Int, _to common.Address, _router common.Address) (*types.Transaction, error) {
	return _ERC20OrbitBridger.Contract.BridgeERC20(&_ERC20OrbitBridger.TransactOpts, _token, _amount, _to, _router)
}

// BridgeERC20 is a paid mutator transaction binding the contract method 0xa86ce05e.
//
// Solidity: function bridgeERC20(address _token, uint256 _amount, address _to, address _router) returns()
func (_ERC20OrbitBridger *ERC20OrbitBridgerTransactorSession) BridgeERC20(_token common.Address, _amount *big.Int, _to common.Address, _router common.Address) (*types.Transaction, error) {
	return _ERC20OrbitBridger.Contract.BridgeERC20(&_ERC20OrbitBridger.TransactOpts, _token, _amount, _to, _router)
}

func CreateERC20OrbitBridgerDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new ERC20OrbitBridger contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if rpc == "" {
				return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Generate deploy bytecode with constructor arguments
				deployBytecode, err := generateERC20OrbitBridgerDeployBytecode()
				if err != nil {
					return fmt.Errorf("failed to generate deploy bytecode: %v", err)
				}

				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployBytecode)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployBytecode, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployERC20OrbitBridger(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")

	return cmd
}

func generateERC20OrbitBridgerDeployBytecode() ([]byte, error) {
	abiPacked, err := ERC20OrbitBridgerMetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("")
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(ERC20OrbitBridgerMetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateCalculateRetryableSubmissionFeeCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var calldata []byte
	var calldataRaw string
	var baseFee *big.Int
	var baseFeeRaw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "calculate-retryable-submission-fee",
		Short: "Call the CalculateRetryableSubmissionFee view method on a ERC20OrbitBridger contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			var calldataIntermediate []byte

			var calldataIntermediateHexDecodeErr error
			calldataIntermediate, calldataIntermediateHexDecodeErr = hex.DecodeString(calldataRaw)
			if calldataIntermediateHexDecodeErr != nil {
				return calldataIntermediateHexDecodeErr
			}

			copy(calldata[:], calldataIntermediate)

			if baseFeeRaw == "" {
				return fmt.Errorf("--base-fee argument not specified")
			}
			baseFee = new(big.Int)
			baseFee.SetString(baseFeeRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC20OrbitBridger(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC20OrbitBridgerCallerSession{
				Contract: &contract.ERC20OrbitBridgerCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.CalculateRetryableSubmissionFee(
				calldata,
				baseFee,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&calldataRaw, "calldata", "", "calldata argument ([]byte)")
	cmd.Flags().StringVar(&baseFeeRaw, "base-fee", "", "base-fee argument")

	return cmd
}
func CreateDefaultgaslimitCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "defaultgaslimit",
		Short: "Call the DEFAULTGASLIMIT view method on a ERC20OrbitBridger contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC20OrbitBridger(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC20OrbitBridgerCallerSession{
				Contract: &contract.ERC20OrbitBridgerCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.DEFAULTGASLIMIT()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateDefaultsubmissionfeepercentincreaseCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "defaultsubmissionfeepercentincrease",
		Short: "Call the DEFAULTSUBMISSIONFEEPERCENTINCREASE view method on a ERC20OrbitBridger contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC20OrbitBridger(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC20OrbitBridgerCallerSession{
				Contract: &contract.ERC20OrbitBridgerCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.DEFAULTSUBMISSIONFEEPERCENTINCREASE()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateIsReentrantCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "is-reentrant",
		Short: "Call the IsReentrant view method on a ERC20OrbitBridger contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewERC20OrbitBridger(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := ERC20OrbitBridgerCallerSession{
				Contract: &contract.ERC20OrbitBridgerCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.IsReentrant()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateBridgeErc20Command() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int

	var token common.Address
	var tokenRaw string
	var amount *big.Int
	var amountRaw string
	var _to0 common.Address
	var _to0Raw string
	var router common.Address
	var routerRaw string

	cmd := &cobra.Command{
		Use:   "bridge-erc-20",
		Short: "Execute the BridgeERC20 method on a ERC20OrbitBridger contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if keyfile == "" {
				return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
			}

			if rpc == "" {
				return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if tokenRaw == "" {
				return fmt.Errorf("--token argument not specified")
			} else if !common.IsHexAddress(tokenRaw) {
				return fmt.Errorf("--token argument is not a valid Ethereum address")
			}
			token = common.HexToAddress(tokenRaw)

			if amountRaw == "" {
				return fmt.Errorf("--amount argument not specified")
			}
			amount = new(big.Int)
			amount.SetString(amountRaw, 0)

			if _to0Raw == "" {
				return fmt.Errorf("---to-0 argument not specified")
			} else if !common.IsHexAddress(_to0Raw) {
				return fmt.Errorf("---to-0 argument is not a valid Ethereum address")
			}
			_to0 = common.HexToAddress(_to0Raw)

			if routerRaw == "" {
				return fmt.Errorf("--router argument not specified")
			} else if !common.IsHexAddress(routerRaw) {
				return fmt.Errorf("--router argument is not a valid Ethereum address")
			}
			router = common.HexToAddress(routerRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewERC20OrbitBridger(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := ERC20OrbitBridgerTransactorSession{
				Contract:     &contract.ERC20OrbitBridgerTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				abi, err := ERC20OrbitBridgerMetaData.GetAbi()
				if err != nil {
					return fmt.Errorf("failed to get ABI: %v", err)
				}

				// Generate transaction data (override method name if safe function is specified)
				methodName := "bridgeErc20"
				if safeFunction != "" {
					methodName = safeFunction
				}

				transaction, err := abi.Pack(
					methodName,
					token,
					amount,
					_to0,
					router,
				)

				if err != nil {
					return err
				}

				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, transaction, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.BridgeERC20(

				token,
				amount,
				_to0,
				router,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")

	cmd.Flags().StringVar(&tokenRaw, "token", "", "token argument (common.Address)")
	cmd.Flags().StringVar(&amountRaw, "amount", "", "amount argument")
	cmd.Flags().StringVar(&_to0Raw, "-to-0", "", "-to-0 argument (common.Address)")
	cmd.Flags().StringVar(&routerRaw, "router", "", "router argument (common.Address)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the ERC_20_ORBIT_BRIDGER_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the ERC_20_ORBIT_BRIDGER_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("ERC_20_ORBIT_BRIDGER_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateERC20OrbitBridgerCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "erc-20-orbit-bridger",
		Short: "Interact with the ERC20OrbitBridger contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployERC20OrbitBridger := CreateERC20OrbitBridgerDeploymentCommand()
	cmdDeployERC20OrbitBridger.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployERC20OrbitBridger)

	cmdViewCalculateRetryableSubmissionFee := CreateCalculateRetryableSubmissionFeeCommand()
	cmdViewCalculateRetryableSubmissionFee.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewCalculateRetryableSubmissionFee)
	cmdViewDEFAULTGASLIMIT := CreateDefaultgaslimitCommand()
	cmdViewDEFAULTGASLIMIT.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDEFAULTGASLIMIT)
	cmdViewDEFAULTSUBMISSIONFEEPERCENTINCREASE := CreateDefaultsubmissionfeepercentincreaseCommand()
	cmdViewDEFAULTSUBMISSIONFEEPERCENTINCREASE.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewDEFAULTSUBMISSIONFEEPERCENTINCREASE)
	cmdViewIsReentrant := CreateIsReentrantCommand()
	cmdViewIsReentrant.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewIsReentrant)

	cmdTransactBridgeERC20 := CreateBridgeErc20Command()
	cmdTransactBridgeERC20.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactBridgeERC20)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}
