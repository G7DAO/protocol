// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.3.15
// seer command: seer evm generate --package Metronome --cli --struct Metronome --output bindings/Metronome/Metronome.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package Metronome

import (
	"bytes"
	"crypto/rand"
	"errors"
	"math/big"
	"net/http"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// MetronomeMetaData contains all meta data concerning the Metronome contract.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var MetronomeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"InvalidSchedule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BalanceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"BountyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"ScheduleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ClaimedBounties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NumSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ScheduleBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Schedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"scheduleIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"forAddress\",\"type\":\"address\"}],\"name\":\"claimBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleID\",\"type\":\"uint256\"}],\"name\":\"increaseBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600f57600080fd5b50600160005561091d806100246000396000f3fe60806040526004361061007b5760003560e01c80634a82fe981161004e5780634a82fe98146101295780635294bac8146101565780638c3f896e14610169578063ddd5e1b2146101bf57600080fd5b806314e6424c1461008057806318d052e3146100a95780631e2339e3146100cb5780633e4ccb4014610116575b600080fd5b34801561008c57600080fd5b5061009660045481565b6040519081526020015b60405180910390f35b3480156100b557600080fd5b506100c96100c4366004610663565b6101df565b005b3480156100d757600080fd5b506101066100e6366004610760565b600360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100a0565b6100c9610124366004610782565b61022d565b34801561013557600080fd5b50610096610144366004610782565b60026020526000908152604090205481565b61009661016436600461079b565b610288565b34801561017557600080fd5b506101a4610184366004610782565b600160208190526000918252604090912080549181015460029091015483565b604080519384526020840192909252908201526060016100a0565b3480156101cb57600080fd5b506100c96101da3660046107c7565b610427565b6101e7610443565b60005b825181101561021e57610216838281518110610208576102086107ea565b602002602001015183610486565b6001016101ea565b506102296001600055565b5050565b6000818152600260205260408120805434929061024b908490610848565b909155505060405134815281907f4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b79060200160405180910390a250565b6000826000036102c4576040517fdba16ce800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000036102fe576040517fdba16ce800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828410610337576040517fdba16ce800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060048054908190600061034a83610861565b909155505060408051606081018252858152602080820186815282840186815260008681526001938490528590209351845590519183019190915551600290910155518390859083907fbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b34831670906103c29087815260200190565b60405180910390a4341561042057600081815260026020526040908190203490819055905182917f4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b79161041791815260200190565b60405180910390a25b9392505050565b61042f610443565b6104398282610486565b6102296001600055565b60026000540361047f576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b600082815260036020908152604080832043845290915290205460ff161580156104cd5750600082815260016020819052604090912080549101546104cb9043610899565b145b15610229576000828152600260208181526040808420546001909252909220015481111561050957506000828152600160205260409020600201545b8015610606576000838152600360209081526040808320438452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905585835260029091528120805483929061056b9084906108d4565b909155505060405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083906000818181858888f193505050501580156105b3573d6000803e3d6000fd5b508173ffffffffffffffffffffffffffffffffffffffff16837f23c972d46b3251ae358ad69fb3761ef8f5c38c5131502ed9e9bde9b129da9215836040516105fd91815260200190565b60405180910390a35b505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461065e57600080fd5b919050565b6000806040838503121561067657600080fd5b823567ffffffffffffffff81111561068d57600080fd5b8301601f8101851361069e57600080fd5b803567ffffffffffffffff8111156106b8576106b861060b565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811067ffffffffffffffff821117156107035761070361060b565b60405291825260208184018101929081018884111561072157600080fd5b6020850194505b8385101561074457843580825260209586019590935001610728565b509450610757925050506020840161063a565b90509250929050565b6000806040838503121561077357600080fd5b50508035926020909101359150565b60006020828403121561079457600080fd5b5035919050565b6000806000606084860312156107b057600080fd5b505081359360208301359350604090920135919050565b600080604083850312156107da57600080fd5b823591506107576020840161063a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561085b5761085b610819565b92915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361089257610892610819565b5060010190565b6000826108cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500690565b8181038181111561085b5761085b61081956fea2646970667358221220a095d8cee35b51beda93fd5327e0ea2fc9c806c54084903583ba649eff61466864736f6c634300081c0033",
}

// MetronomeABI is the input ABI used to generate the binding from.
// Deprecated: Use MetronomeMetaData.ABI instead.
var MetronomeABI = MetronomeMetaData.ABI

// MetronomeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MetronomeMetaData.Bin instead.
var MetronomeBin = MetronomeMetaData.Bin

// DeployMetronome deploys a new Ethereum contract, binding an instance of Metronome to it.
func DeployMetronome(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Metronome, error) {
	parsed, err := MetronomeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MetronomeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Metronome{MetronomeCaller: MetronomeCaller{contract: contract}, MetronomeTransactor: MetronomeTransactor{contract: contract}, MetronomeFilterer: MetronomeFilterer{contract: contract}}, nil
}

// Metronome is an auto generated Go binding around an Ethereum contract.
type Metronome struct {
	MetronomeCaller     // Read-only binding to the contract
	MetronomeTransactor // Write-only binding to the contract
	MetronomeFilterer   // Log filterer for contract events
}

// MetronomeCaller is an auto generated read-only Go binding around an Ethereum contract.
type MetronomeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MetronomeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetronomeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MetronomeSession struct {
	Contract     *Metronome        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MetronomeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MetronomeCallerSession struct {
	Contract *MetronomeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// MetronomeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MetronomeTransactorSession struct {
	Contract     *MetronomeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MetronomeRaw is an auto generated low-level Go binding around an Ethereum contract.
type MetronomeRaw struct {
	Contract *Metronome // Generic contract binding to access the raw methods on
}

// MetronomeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MetronomeCallerRaw struct {
	Contract *MetronomeCaller // Generic read-only contract binding to access the raw methods on
}

// MetronomeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MetronomeTransactorRaw struct {
	Contract *MetronomeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMetronome creates a new instance of Metronome, bound to a specific deployed contract.
func NewMetronome(address common.Address, backend bind.ContractBackend) (*Metronome, error) {
	contract, err := bindMetronome(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Metronome{MetronomeCaller: MetronomeCaller{contract: contract}, MetronomeTransactor: MetronomeTransactor{contract: contract}, MetronomeFilterer: MetronomeFilterer{contract: contract}}, nil
}

// NewMetronomeCaller creates a new read-only instance of Metronome, bound to a specific deployed contract.
func NewMetronomeCaller(address common.Address, caller bind.ContractCaller) (*MetronomeCaller, error) {
	contract, err := bindMetronome(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetronomeCaller{contract: contract}, nil
}

// NewMetronomeTransactor creates a new write-only instance of Metronome, bound to a specific deployed contract.
func NewMetronomeTransactor(address common.Address, transactor bind.ContractTransactor) (*MetronomeTransactor, error) {
	contract, err := bindMetronome(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetronomeTransactor{contract: contract}, nil
}

// NewMetronomeFilterer creates a new log filterer instance of Metronome, bound to a specific deployed contract.
func NewMetronomeFilterer(address common.Address, filterer bind.ContractFilterer) (*MetronomeFilterer, error) {
	contract, err := bindMetronome(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetronomeFilterer{contract: contract}, nil
}

// bindMetronome binds a generic wrapper to an already deployed contract.
func bindMetronome(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MetronomeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Metronome *MetronomeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Metronome.Contract.MetronomeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Metronome *MetronomeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Metronome.Contract.MetronomeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Metronome *MetronomeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Metronome.Contract.MetronomeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Metronome *MetronomeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Metronome.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Metronome *MetronomeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Metronome.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Metronome *MetronomeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Metronome.Contract.contract.Transact(opts, method, params...)
}

// ClaimedBounties is a free data retrieval call binding the contract method 0x1e2339e3.
//
// Solidity: function ClaimedBounties(uint256 , uint256 ) view returns(bool)
func (_Metronome *MetronomeCaller) ClaimedBounties(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "ClaimedBounties", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ClaimedBounties is a free data retrieval call binding the contract method 0x1e2339e3.
//
// Solidity: function ClaimedBounties(uint256 , uint256 ) view returns(bool)
func (_Metronome *MetronomeSession) ClaimedBounties(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _Metronome.Contract.ClaimedBounties(&_Metronome.CallOpts, arg0, arg1)
}

// ClaimedBounties is a free data retrieval call binding the contract method 0x1e2339e3.
//
// Solidity: function ClaimedBounties(uint256 , uint256 ) view returns(bool)
func (_Metronome *MetronomeCallerSession) ClaimedBounties(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _Metronome.Contract.ClaimedBounties(&_Metronome.CallOpts, arg0, arg1)
}

// NumSchedules is a free data retrieval call binding the contract method 0x14e6424c.
//
// Solidity: function NumSchedules() view returns(uint256)
func (_Metronome *MetronomeCaller) NumSchedules(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "NumSchedules")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumSchedules is a free data retrieval call binding the contract method 0x14e6424c.
//
// Solidity: function NumSchedules() view returns(uint256)
func (_Metronome *MetronomeSession) NumSchedules() (*big.Int, error) {
	return _Metronome.Contract.NumSchedules(&_Metronome.CallOpts)
}

// NumSchedules is a free data retrieval call binding the contract method 0x14e6424c.
//
// Solidity: function NumSchedules() view returns(uint256)
func (_Metronome *MetronomeCallerSession) NumSchedules() (*big.Int, error) {
	return _Metronome.Contract.NumSchedules(&_Metronome.CallOpts)
}

// ScheduleBalances is a free data retrieval call binding the contract method 0x4a82fe98.
//
// Solidity: function ScheduleBalances(uint256 ) view returns(uint256)
func (_Metronome *MetronomeCaller) ScheduleBalances(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "ScheduleBalances", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScheduleBalances is a free data retrieval call binding the contract method 0x4a82fe98.
//
// Solidity: function ScheduleBalances(uint256 ) view returns(uint256)
func (_Metronome *MetronomeSession) ScheduleBalances(arg0 *big.Int) (*big.Int, error) {
	return _Metronome.Contract.ScheduleBalances(&_Metronome.CallOpts, arg0)
}

// ScheduleBalances is a free data retrieval call binding the contract method 0x4a82fe98.
//
// Solidity: function ScheduleBalances(uint256 ) view returns(uint256)
func (_Metronome *MetronomeCallerSession) ScheduleBalances(arg0 *big.Int) (*big.Int, error) {
	return _Metronome.Contract.ScheduleBalances(&_Metronome.CallOpts, arg0)
}

// Schedules is a free data retrieval call binding the contract method 0x8c3f896e.
//
// Solidity: function Schedules(uint256 ) view returns(uint256 remainder, uint256 divisor, uint256 bounty)
func (_Metronome *MetronomeCaller) Schedules(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Remainder *big.Int
	Divisor   *big.Int
	Bounty    *big.Int
}, error) {
	var out []interface{}
	err := _Metronome.contract.Call(opts, &out, "Schedules", arg0)

	outstruct := new(struct {
		Remainder *big.Int
		Divisor   *big.Int
		Bounty    *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Remainder = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Divisor = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bounty = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Schedules is a free data retrieval call binding the contract method 0x8c3f896e.
//
// Solidity: function Schedules(uint256 ) view returns(uint256 remainder, uint256 divisor, uint256 bounty)
func (_Metronome *MetronomeSession) Schedules(arg0 *big.Int) (struct {
	Remainder *big.Int
	Divisor   *big.Int
	Bounty    *big.Int
}, error) {
	return _Metronome.Contract.Schedules(&_Metronome.CallOpts, arg0)
}

// Schedules is a free data retrieval call binding the contract method 0x8c3f896e.
//
// Solidity: function Schedules(uint256 ) view returns(uint256 remainder, uint256 divisor, uint256 bounty)
func (_Metronome *MetronomeCallerSession) Schedules(arg0 *big.Int) (struct {
	Remainder *big.Int
	Divisor   *big.Int
	Bounty    *big.Int
}, error) {
	return _Metronome.Contract.Schedules(&_Metronome.CallOpts, arg0)
}

// Claim is a paid mutator transaction binding the contract method 0xddd5e1b2.
//
// Solidity: function claim(uint256 scheduleID, address forAddress) returns()
func (_Metronome *MetronomeTransactor) Claim(opts *bind.TransactOpts, scheduleID *big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.contract.Transact(opts, "claim", scheduleID, forAddress)
}

// Claim is a paid mutator transaction binding the contract method 0xddd5e1b2.
//
// Solidity: function claim(uint256 scheduleID, address forAddress) returns()
func (_Metronome *MetronomeSession) Claim(scheduleID *big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.Contract.Claim(&_Metronome.TransactOpts, scheduleID, forAddress)
}

// Claim is a paid mutator transaction binding the contract method 0xddd5e1b2.
//
// Solidity: function claim(uint256 scheduleID, address forAddress) returns()
func (_Metronome *MetronomeTransactorSession) Claim(scheduleID *big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.Contract.Claim(&_Metronome.TransactOpts, scheduleID, forAddress)
}

// ClaimBatch is a paid mutator transaction binding the contract method 0x18d052e3.
//
// Solidity: function claimBatch(uint256[] scheduleIDs, address forAddress) returns()
func (_Metronome *MetronomeTransactor) ClaimBatch(opts *bind.TransactOpts, scheduleIDs []*big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.contract.Transact(opts, "claimBatch", scheduleIDs, forAddress)
}

// ClaimBatch is a paid mutator transaction binding the contract method 0x18d052e3.
//
// Solidity: function claimBatch(uint256[] scheduleIDs, address forAddress) returns()
func (_Metronome *MetronomeSession) ClaimBatch(scheduleIDs []*big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.Contract.ClaimBatch(&_Metronome.TransactOpts, scheduleIDs, forAddress)
}

// ClaimBatch is a paid mutator transaction binding the contract method 0x18d052e3.
//
// Solidity: function claimBatch(uint256[] scheduleIDs, address forAddress) returns()
func (_Metronome *MetronomeTransactorSession) ClaimBatch(scheduleIDs []*big.Int, forAddress common.Address) (*types.Transaction, error) {
	return _Metronome.Contract.ClaimBatch(&_Metronome.TransactOpts, scheduleIDs, forAddress)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x5294bac8.
//
// Solidity: function createSchedule(uint256 remainder, uint256 divisor, uint256 bounty) payable returns(uint256 scheduleID)
func (_Metronome *MetronomeTransactor) CreateSchedule(opts *bind.TransactOpts, remainder *big.Int, divisor *big.Int, bounty *big.Int) (*types.Transaction, error) {
	return _Metronome.contract.Transact(opts, "createSchedule", remainder, divisor, bounty)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x5294bac8.
//
// Solidity: function createSchedule(uint256 remainder, uint256 divisor, uint256 bounty) payable returns(uint256 scheduleID)
func (_Metronome *MetronomeSession) CreateSchedule(remainder *big.Int, divisor *big.Int, bounty *big.Int) (*types.Transaction, error) {
	return _Metronome.Contract.CreateSchedule(&_Metronome.TransactOpts, remainder, divisor, bounty)
}

// CreateSchedule is a paid mutator transaction binding the contract method 0x5294bac8.
//
// Solidity: function createSchedule(uint256 remainder, uint256 divisor, uint256 bounty) payable returns(uint256 scheduleID)
func (_Metronome *MetronomeTransactorSession) CreateSchedule(remainder *big.Int, divisor *big.Int, bounty *big.Int) (*types.Transaction, error) {
	return _Metronome.Contract.CreateSchedule(&_Metronome.TransactOpts, remainder, divisor, bounty)
}

// IncreaseBalance is a paid mutator transaction binding the contract method 0x3e4ccb40.
//
// Solidity: function increaseBalance(uint256 scheduleID) payable returns()
func (_Metronome *MetronomeTransactor) IncreaseBalance(opts *bind.TransactOpts, scheduleID *big.Int) (*types.Transaction, error) {
	return _Metronome.contract.Transact(opts, "increaseBalance", scheduleID)
}

// IncreaseBalance is a paid mutator transaction binding the contract method 0x3e4ccb40.
//
// Solidity: function increaseBalance(uint256 scheduleID) payable returns()
func (_Metronome *MetronomeSession) IncreaseBalance(scheduleID *big.Int) (*types.Transaction, error) {
	return _Metronome.Contract.IncreaseBalance(&_Metronome.TransactOpts, scheduleID)
}

// IncreaseBalance is a paid mutator transaction binding the contract method 0x3e4ccb40.
//
// Solidity: function increaseBalance(uint256 scheduleID) payable returns()
func (_Metronome *MetronomeTransactorSession) IncreaseBalance(scheduleID *big.Int) (*types.Transaction, error) {
	return _Metronome.Contract.IncreaseBalance(&_Metronome.TransactOpts, scheduleID)
}

// MetronomeBalanceIncreasedIterator is returned from FilterBalanceIncreased and is used to iterate over the raw logs and unpacked data for BalanceIncreased events raised by the Metronome contract.
type MetronomeBalanceIncreasedIterator struct {
	Event *MetronomeBalanceIncreased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetronomeBalanceIncreasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetronomeBalanceIncreased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetronomeBalanceIncreased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetronomeBalanceIncreasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetronomeBalanceIncreasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetronomeBalanceIncreased represents a BalanceIncreased event raised by the Metronome contract.
type MetronomeBalanceIncreased struct {
	ScheduleID *big.Int
	Amount     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBalanceIncreased is a free log retrieval operation binding the contract event 0x4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b7.
//
// Solidity: event BalanceIncreased(uint256 indexed scheduleID, uint256 amount)
func (_Metronome *MetronomeFilterer) FilterBalanceIncreased(opts *bind.FilterOpts, scheduleID []*big.Int) (*MetronomeBalanceIncreasedIterator, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}

	logs, sub, err := _Metronome.contract.FilterLogs(opts, "BalanceIncreased", scheduleIDRule)
	if err != nil {
		return nil, err
	}
	return &MetronomeBalanceIncreasedIterator{contract: _Metronome.contract, event: "BalanceIncreased", logs: logs, sub: sub}, nil
}

// WatchBalanceIncreased is a free log subscription operation binding the contract event 0x4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b7.
//
// Solidity: event BalanceIncreased(uint256 indexed scheduleID, uint256 amount)
func (_Metronome *MetronomeFilterer) WatchBalanceIncreased(opts *bind.WatchOpts, sink chan<- *MetronomeBalanceIncreased, scheduleID []*big.Int) (event.Subscription, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}

	logs, sub, err := _Metronome.contract.WatchLogs(opts, "BalanceIncreased", scheduleIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetronomeBalanceIncreased)
				if err := _Metronome.contract.UnpackLog(event, "BalanceIncreased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceIncreased is a log parse operation binding the contract event 0x4547cc37be8de03db39508613822773a49bc23d17ee4230fa6ec1a0c260156b7.
//
// Solidity: event BalanceIncreased(uint256 indexed scheduleID, uint256 amount)
func (_Metronome *MetronomeFilterer) ParseBalanceIncreased(log types.Log) (*MetronomeBalanceIncreased, error) {
	event := new(MetronomeBalanceIncreased)
	if err := _Metronome.contract.UnpackLog(event, "BalanceIncreased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MetronomeBountyClaimedIterator is returned from FilterBountyClaimed and is used to iterate over the raw logs and unpacked data for BountyClaimed events raised by the Metronome contract.
type MetronomeBountyClaimedIterator struct {
	Event *MetronomeBountyClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetronomeBountyClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetronomeBountyClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetronomeBountyClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetronomeBountyClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetronomeBountyClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetronomeBountyClaimed represents a BountyClaimed event raised by the Metronome contract.
type MetronomeBountyClaimed struct {
	ScheduleID *big.Int
	ForAddress common.Address
	Payment    *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBountyClaimed is a free log retrieval operation binding the contract event 0x23c972d46b3251ae358ad69fb3761ef8f5c38c5131502ed9e9bde9b129da9215.
//
// Solidity: event BountyClaimed(uint256 indexed scheduleID, address indexed forAddress, uint256 payment)
func (_Metronome *MetronomeFilterer) FilterBountyClaimed(opts *bind.FilterOpts, scheduleID []*big.Int, forAddress []common.Address) (*MetronomeBountyClaimedIterator, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}
	var forAddressRule []interface{}
	for _, forAddressItem := range forAddress {
		forAddressRule = append(forAddressRule, forAddressItem)
	}

	logs, sub, err := _Metronome.contract.FilterLogs(opts, "BountyClaimed", scheduleIDRule, forAddressRule)
	if err != nil {
		return nil, err
	}
	return &MetronomeBountyClaimedIterator{contract: _Metronome.contract, event: "BountyClaimed", logs: logs, sub: sub}, nil
}

// WatchBountyClaimed is a free log subscription operation binding the contract event 0x23c972d46b3251ae358ad69fb3761ef8f5c38c5131502ed9e9bde9b129da9215.
//
// Solidity: event BountyClaimed(uint256 indexed scheduleID, address indexed forAddress, uint256 payment)
func (_Metronome *MetronomeFilterer) WatchBountyClaimed(opts *bind.WatchOpts, sink chan<- *MetronomeBountyClaimed, scheduleID []*big.Int, forAddress []common.Address) (event.Subscription, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}
	var forAddressRule []interface{}
	for _, forAddressItem := range forAddress {
		forAddressRule = append(forAddressRule, forAddressItem)
	}

	logs, sub, err := _Metronome.contract.WatchLogs(opts, "BountyClaimed", scheduleIDRule, forAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetronomeBountyClaimed)
				if err := _Metronome.contract.UnpackLog(event, "BountyClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBountyClaimed is a log parse operation binding the contract event 0x23c972d46b3251ae358ad69fb3761ef8f5c38c5131502ed9e9bde9b129da9215.
//
// Solidity: event BountyClaimed(uint256 indexed scheduleID, address indexed forAddress, uint256 payment)
func (_Metronome *MetronomeFilterer) ParseBountyClaimed(log types.Log) (*MetronomeBountyClaimed, error) {
	event := new(MetronomeBountyClaimed)
	if err := _Metronome.contract.UnpackLog(event, "BountyClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MetronomeScheduleCreatedIterator is returned from FilterScheduleCreated and is used to iterate over the raw logs and unpacked data for ScheduleCreated events raised by the Metronome contract.
type MetronomeScheduleCreatedIterator struct {
	Event *MetronomeScheduleCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetronomeScheduleCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetronomeScheduleCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetronomeScheduleCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetronomeScheduleCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetronomeScheduleCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetronomeScheduleCreated represents a ScheduleCreated event raised by the Metronome contract.
type MetronomeScheduleCreated struct {
	ScheduleID *big.Int
	Remainder  *big.Int
	Divisor    *big.Int
	Bounty     *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScheduleCreated is a free log retrieval operation binding the contract event 0xbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b34831670.
//
// Solidity: event ScheduleCreated(uint256 indexed scheduleID, uint256 indexed remainder, uint256 indexed divisor, uint256 bounty)
func (_Metronome *MetronomeFilterer) FilterScheduleCreated(opts *bind.FilterOpts, scheduleID []*big.Int, remainder []*big.Int, divisor []*big.Int) (*MetronomeScheduleCreatedIterator, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}
	var remainderRule []interface{}
	for _, remainderItem := range remainder {
		remainderRule = append(remainderRule, remainderItem)
	}
	var divisorRule []interface{}
	for _, divisorItem := range divisor {
		divisorRule = append(divisorRule, divisorItem)
	}

	logs, sub, err := _Metronome.contract.FilterLogs(opts, "ScheduleCreated", scheduleIDRule, remainderRule, divisorRule)
	if err != nil {
		return nil, err
	}
	return &MetronomeScheduleCreatedIterator{contract: _Metronome.contract, event: "ScheduleCreated", logs: logs, sub: sub}, nil
}

// WatchScheduleCreated is a free log subscription operation binding the contract event 0xbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b34831670.
//
// Solidity: event ScheduleCreated(uint256 indexed scheduleID, uint256 indexed remainder, uint256 indexed divisor, uint256 bounty)
func (_Metronome *MetronomeFilterer) WatchScheduleCreated(opts *bind.WatchOpts, sink chan<- *MetronomeScheduleCreated, scheduleID []*big.Int, remainder []*big.Int, divisor []*big.Int) (event.Subscription, error) {

	var scheduleIDRule []interface{}
	for _, scheduleIDItem := range scheduleID {
		scheduleIDRule = append(scheduleIDRule, scheduleIDItem)
	}
	var remainderRule []interface{}
	for _, remainderItem := range remainder {
		remainderRule = append(remainderRule, remainderItem)
	}
	var divisorRule []interface{}
	for _, divisorItem := range divisor {
		divisorRule = append(divisorRule, divisorItem)
	}

	logs, sub, err := _Metronome.contract.WatchLogs(opts, "ScheduleCreated", scheduleIDRule, remainderRule, divisorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetronomeScheduleCreated)
				if err := _Metronome.contract.UnpackLog(event, "ScheduleCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScheduleCreated is a log parse operation binding the contract event 0xbd7880573155705535dce3194981f4b25e22063a5619ea279e73b43b34831670.
//
// Solidity: event ScheduleCreated(uint256 indexed scheduleID, uint256 indexed remainder, uint256 indexed divisor, uint256 bounty)
func (_Metronome *MetronomeFilterer) ParseScheduleCreated(log types.Log) (*MetronomeScheduleCreated, error) {
	event := new(MetronomeScheduleCreated)
	if err := _Metronome.contract.UnpackLog(event, "ScheduleCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateMetronomeDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int
	var calldata bool

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {

			if !calldata {
				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			// Generate deploy bytecode with constructor arguments
			deployCalldata, err := generateMetronomeDeployBytecode()
			if err != nil {
				return fmt.Errorf("failed to generate deploy bytecode: %v", err)
			}

			if calldata {
				deployCalldataHex := hex.EncodeToString(deployCalldata)
				cmd.Println(deployCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployCalldata)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployCalldata, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployMetronome(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	return cmd
}

func generateMetronomeDeployBytecode() ([]byte, error) {
	abiPacked, err := MetronomeMetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("")
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(MetronomeMetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateClaimedBountiesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string
	var arg1 *big.Int
	var arg1Raw string

	var capture0 bool

	cmd := &cobra.Command{
		Use:   "claimed-bounties",
		Short: "Call the ClaimedBounties view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			if arg1Raw == "" {
				return fmt.Errorf("--arg-1 argument not specified")
			}
			arg1 = new(big.Int)
			arg1.SetString(arg1Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ClaimedBounties(
				arg0,
				arg1,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %t\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")
	cmd.Flags().StringVar(&arg1Raw, "arg-1", "", "arg-1 argument")

	return cmd
}
func CreateNumSchedulesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "num-schedules",
		Short: "Call the NumSchedules view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.NumSchedules()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateScheduleBalancesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "schedule-balances",
		Short: "Call the ScheduleBalances view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ScheduleBalances(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}
func CreateSchedulesCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 *big.Int
	var arg0Raw string

	var capture0 struct {
		Remainder *big.Int
		Divisor   *big.Int
		Bounty    *big.Int
	}

	cmd := &cobra.Command{
		Use:   "schedules",
		Short: "Call the Schedules view method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			}
			arg0 = new(big.Int)
			arg0.SetString(arg0Raw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeCallerSession{
				Contract: &contract.MetronomeCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.Schedules(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument")

	return cmd
}

func CreateClaimCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var scheduleID *big.Int
	var scheduleIDRaw string
	var forAddress common.Address
	var forAddressRaw string

	cmd := &cobra.Command{
		Use:   "claim",
		Short: "Execute the Claim method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if scheduleIDRaw == "" {
				return fmt.Errorf("--schedule-id argument not specified")
			}
			scheduleID = new(big.Int)
			scheduleID.SetString(scheduleIDRaw, 0)

			if forAddressRaw == "" {
				return fmt.Errorf("--for-address argument not specified")
			} else if !common.IsHexAddress(forAddressRaw) {
				return fmt.Errorf("--for-address argument is not a valid Ethereum address")
			}
			forAddress = common.HexToAddress(forAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := MetronomeMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "claim"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				scheduleID,
				forAddress,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeTransactorSession{
				Contract:     &contract.MetronomeTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.Claim(

				scheduleID,
				forAddress,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&scheduleIDRaw, "schedule-id", "", "schedule-id argument")
	cmd.Flags().StringVar(&forAddressRaw, "for-address", "", "for-address argument (common.Address)")

	return cmd
}
func CreateClaimBatchCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var scheduleIDs []*big.Int
	var scheduleIDsRaw string
	var forAddress common.Address
	var forAddressRaw string

	cmd := &cobra.Command{
		Use:   "claim-batch",
		Short: "Execute the ClaimBatch method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if scheduleIDsRaw == "" {
				return fmt.Errorf("--schedule-i-ds argument not specified")
			} else if strings.HasPrefix(scheduleIDsRaw, "@") {
				filename := strings.TrimPrefix(scheduleIDsRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &scheduleIDs)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(scheduleIDsRaw), &scheduleIDs)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			if forAddressRaw == "" {
				return fmt.Errorf("--for-address argument not specified")
			} else if !common.IsHexAddress(forAddressRaw) {
				return fmt.Errorf("--for-address argument is not a valid Ethereum address")
			}
			forAddress = common.HexToAddress(forAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := MetronomeMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "claimBatch"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				scheduleIDs,
				forAddress,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeTransactorSession{
				Contract:     &contract.MetronomeTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.ClaimBatch(

				scheduleIDs,
				forAddress,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&scheduleIDsRaw, "schedule-i-ds", "", "schedule-i-ds argument ([]*big.Int)")
	cmd.Flags().StringVar(&forAddressRaw, "for-address", "", "for-address argument (common.Address)")

	return cmd
}
func CreateCreateScheduleCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var remainder *big.Int
	var remainderRaw string
	var divisor *big.Int
	var divisorRaw string
	var bounty *big.Int
	var bountyRaw string

	cmd := &cobra.Command{
		Use:   "create-schedule",
		Short: "Execute the CreateSchedule method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if remainderRaw == "" {
				return fmt.Errorf("--remainder argument not specified")
			}
			remainder = new(big.Int)
			remainder.SetString(remainderRaw, 0)

			if divisorRaw == "" {
				return fmt.Errorf("--divisor argument not specified")
			}
			divisor = new(big.Int)
			divisor.SetString(divisorRaw, 0)

			if bountyRaw == "" {
				return fmt.Errorf("--bounty argument not specified")
			}
			bounty = new(big.Int)
			bounty.SetString(bountyRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := MetronomeMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "createSchedule"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				remainder,
				divisor,
				bounty,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeTransactorSession{
				Contract:     &contract.MetronomeTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.CreateSchedule(

				remainder,
				divisor,
				bounty,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&remainderRaw, "remainder", "", "remainder argument")
	cmd.Flags().StringVar(&divisorRaw, "divisor", "", "divisor argument")
	cmd.Flags().StringVar(&bountyRaw, "bounty", "", "bounty argument")

	return cmd
}
func CreateIncreaseBalanceCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var scheduleID *big.Int
	var scheduleIDRaw string

	cmd := &cobra.Command{
		Use:   "increase-balance",
		Short: "Execute the IncreaseBalance method on a Metronome contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if scheduleIDRaw == "" {
				return fmt.Errorf("--schedule-id argument not specified")
			}
			scheduleID = new(big.Int)
			scheduleID.SetString(scheduleIDRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := MetronomeMetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "increaseBalance"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				scheduleID,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronome(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeTransactorSession{
				Contract:     &contract.MetronomeTransactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.IncreaseBalance(

				scheduleID,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&scheduleIDRaw, "schedule-id", "", "schedule-id argument")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the METRONOME_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the METRONOME_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("METRONOME_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateMetronomeCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "metronome",
		Short: "Interact with the Metronome contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployMetronome := CreateMetronomeDeploymentCommand()
	cmdDeployMetronome.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployMetronome)

	cmdViewClaimedBounties := CreateClaimedBountiesCommand()
	cmdViewClaimedBounties.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewClaimedBounties)
	cmdViewNumSchedules := CreateNumSchedulesCommand()
	cmdViewNumSchedules.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewNumSchedules)
	cmdViewScheduleBalances := CreateScheduleBalancesCommand()
	cmdViewScheduleBalances.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewScheduleBalances)
	cmdViewSchedules := CreateSchedulesCommand()
	cmdViewSchedules.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewSchedules)

	cmdTransactClaim := CreateClaimCommand()
	cmdTransactClaim.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaim)
	cmdTransactClaimBatch := CreateClaimBatchCommand()
	cmdTransactClaimBatch.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactClaimBatch)
	cmdTransactCreateSchedule := CreateCreateScheduleCommand()
	cmdTransactCreateSchedule.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCreateSchedule)
	cmdTransactIncreaseBalance := CreateIncreaseBalanceCommand()
	cmdTransactIncreaseBalance.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactIncreaseBalance)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}
