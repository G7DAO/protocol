// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.3.15
// seer command: seer evm generate --package MetronomeStrat1 --cli --struct MetronomeStrat1 --output bindings/Metronome/MetronomeStrat1/MetronomeStrat1.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package MetronomeStrat1

import (
	"bytes"
	"crypto/rand"
	"errors"
	"math/big"
	"net/http"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// MetronomeStrat1MetaData contains all meta data concerning the MetronomeStrat1 contract.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

var MetronomeStrat1MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidMembership\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasReturn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"MembershipExtension\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arbGasInfo\",\"outputs\":[{\"internalType\":\"contractArbGasInfo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbSys\",\"outputs\":[{\"internalType\":\"contractArbSys\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectArbBlockHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"extendMembership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"arbBlockNumber\",\"type\":\"uint256\"}],\"name\":\"getArbBlockHashAtBlockNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getArbBlockHashesAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastArbBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"membershipEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miniumCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalArbBlockHashesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a0604052348015600f57600080fd5b50600160005542608052608051610a0a61003460003960006103c00152610a0a6000f3fe6080604052600436106100b15760003560e01c8063910956c511610069578063c61d4f381161004e578063c61d4f38146101bb578063cc0a8e0f146101d0578063e66dda27146101f057600080fd5b8063910956c514610179578063b3e5316f1461018e57600080fd5b806331b92f981161009a57806331b92f981461010a57806341327a8d1461013f5780635f0996711461016357600080fd5b80631057d40f146100b6578063296f5688146100f5575b600080fd5b3480156100c257600080fd5b506100cb606481565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610108610103366004610880565b610205565b005b34801561011657600080fd5b5061012a6101253660046108bd565b61035e565b604080519283529015156020830152016100ec565b34801561014b57600080fd5b5061015560055481565b6040519081526020016100ec565b34801561016f57600080fd5b5061015560045481565b34801561018557600080fd5b506100cb606c81565b34801561019a57600080fd5b506101556101a9366004610880565b60016020526000908152604090205481565b3480156101c757600080fd5b506101556103b8565b3480156101dc57600080fd5b5061012a6101eb3660046108bd565b610417565b3480156101fc57600080fd5b50610155610456565b61020d61083d565b60006102176103b8565b905080341015610253576040517f3c6b4b2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061025f3483610905565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160205260409020549091504210156102cf5773ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040812080548392906102c4908490610922565b909155506103009050565b6102d98142610922565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600160205260409020555b73ffffffffffffffffffffffffffffffffffffffff83166000818152600160205260408082205490519092917fc428cf78953ea4aa7889c5c72e87f71a7567a272548edc843376703ece66b9ac91a3505061035b6001600055565b50565b336000908152600160205260408120548190421061038157506000928392509050565b60008381526002602052604090205460055484118015906103af575060008481526002602052604090205415155b91509150915091565b6000806103e57f000000000000000000000000000000000000000000000000000000000000000042610935565b9050600081600654600b6103f99190610905565b6104039190610948565b9050610410600a82610948565b9250505090565b336000908152600160205260408120548190421061043a57506000928392509050565b5050600081815260036020526040902054600454909291111590565b600061046061083d565b60005a905060006001606473ffffffffffffffffffffffffffffffffffffffff1663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190610983565b6104e39190610935565b90506000600554826104f59190610935565b905060008111610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4e6f206e657720626c6f636b730000000000000000000000000000000000000060448201526064015b60405180910390fd5b600181118015610577575061010081105b61058b5761058660ff83610935565b61058f565b6005545b60058190556000906105a2906001610922565b90505b82811161067d576040517f2b407a8200000000000000000000000000000000000000000000000000000000815260048101829052606490632b407a8290602401602060405180830381865afa158015610602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106269190610983565b60008281526002602052604081209190915560048054916106468361099c565b90915550506000818152600260209081526040808320546004548452600390925290912055806106758161099c565b9150506105a5565b506000606c73ffffffffffffffffffffffffffffffffffffffff1663c6f7de0e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f09190610983565b5a6106fb9086610935565b610705903a610905565b61070f9190610922565b9050600a61071e82600b610905565b6107289190610948565b6107329082610922565b905080600660008282546107469190610922565b9091555050604051600090339083908381818185875af1925050503d806000811461078d576040519150601f19603f3d011682016040523d82523d6000602084013e610792565b606091505b50509050806107fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5472616e73666572206661696c65640000000000000000000000000000000000604482015260640161055d565b604051829033907f3345c23bde8834073ec0482c997df63a2717b52827fa8d995aaf07cadf7f4a1190600090a350935050505061083a6001600055565b90565b600260005403610879576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600055565b60006020828403121561089257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108b657600080fd5b9392505050565b6000602082840312156108cf57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761091c5761091c6108d6565b92915050565b8082018082111561091c5761091c6108d6565b8181038181111561091c5761091c6108d6565b60008261097e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561099557600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109cd576109cd6108d6565b506001019056fea2646970667358221220afbd02ddd440bf4856a3dc01055b685e0aa3d9f58a7e7908a4a6340578a3c9eb64736f6c634300081c0033",
}

// MetronomeStrat1ABI is the input ABI used to generate the binding from.
// Deprecated: Use MetronomeStrat1MetaData.ABI instead.
var MetronomeStrat1ABI = MetronomeStrat1MetaData.ABI

// MetronomeStrat1Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MetronomeStrat1MetaData.Bin instead.
var MetronomeStrat1Bin = MetronomeStrat1MetaData.Bin

// DeployMetronomeStrat1 deploys a new Ethereum contract, binding an instance of MetronomeStrat1 to it.
func DeployMetronomeStrat1(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MetronomeStrat1, error) {
	parsed, err := MetronomeStrat1MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MetronomeStrat1Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MetronomeStrat1{MetronomeStrat1Caller: MetronomeStrat1Caller{contract: contract}, MetronomeStrat1Transactor: MetronomeStrat1Transactor{contract: contract}, MetronomeStrat1Filterer: MetronomeStrat1Filterer{contract: contract}}, nil
}

// MetronomeStrat1 is an auto generated Go binding around an Ethereum contract.
type MetronomeStrat1 struct {
	MetronomeStrat1Caller     // Read-only binding to the contract
	MetronomeStrat1Transactor // Write-only binding to the contract
	MetronomeStrat1Filterer   // Log filterer for contract events
}

// MetronomeStrat1Caller is an auto generated read-only Go binding around an Ethereum contract.
type MetronomeStrat1Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeStrat1Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MetronomeStrat1Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeStrat1Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MetronomeStrat1Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MetronomeStrat1Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MetronomeStrat1Session struct {
	Contract     *MetronomeStrat1  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MetronomeStrat1CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MetronomeStrat1CallerSession struct {
	Contract *MetronomeStrat1Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// MetronomeStrat1TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MetronomeStrat1TransactorSession struct {
	Contract     *MetronomeStrat1Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// MetronomeStrat1Raw is an auto generated low-level Go binding around an Ethereum contract.
type MetronomeStrat1Raw struct {
	Contract *MetronomeStrat1 // Generic contract binding to access the raw methods on
}

// MetronomeStrat1CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MetronomeStrat1CallerRaw struct {
	Contract *MetronomeStrat1Caller // Generic read-only contract binding to access the raw methods on
}

// MetronomeStrat1TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MetronomeStrat1TransactorRaw struct {
	Contract *MetronomeStrat1Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMetronomeStrat1 creates a new instance of MetronomeStrat1, bound to a specific deployed contract.
func NewMetronomeStrat1(address common.Address, backend bind.ContractBackend) (*MetronomeStrat1, error) {
	contract, err := bindMetronomeStrat1(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MetronomeStrat1{MetronomeStrat1Caller: MetronomeStrat1Caller{contract: contract}, MetronomeStrat1Transactor: MetronomeStrat1Transactor{contract: contract}, MetronomeStrat1Filterer: MetronomeStrat1Filterer{contract: contract}}, nil
}

// NewMetronomeStrat1Caller creates a new read-only instance of MetronomeStrat1, bound to a specific deployed contract.
func NewMetronomeStrat1Caller(address common.Address, caller bind.ContractCaller) (*MetronomeStrat1Caller, error) {
	contract, err := bindMetronomeStrat1(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MetronomeStrat1Caller{contract: contract}, nil
}

// NewMetronomeStrat1Transactor creates a new write-only instance of MetronomeStrat1, bound to a specific deployed contract.
func NewMetronomeStrat1Transactor(address common.Address, transactor bind.ContractTransactor) (*MetronomeStrat1Transactor, error) {
	contract, err := bindMetronomeStrat1(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MetronomeStrat1Transactor{contract: contract}, nil
}

// NewMetronomeStrat1Filterer creates a new log filterer instance of MetronomeStrat1, bound to a specific deployed contract.
func NewMetronomeStrat1Filterer(address common.Address, filterer bind.ContractFilterer) (*MetronomeStrat1Filterer, error) {
	contract, err := bindMetronomeStrat1(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MetronomeStrat1Filterer{contract: contract}, nil
}

// bindMetronomeStrat1 binds a generic wrapper to an already deployed contract.
func bindMetronomeStrat1(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MetronomeStrat1MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetronomeStrat1 *MetronomeStrat1Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MetronomeStrat1.Contract.MetronomeStrat1Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetronomeStrat1 *MetronomeStrat1Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetronomeStrat1.Contract.MetronomeStrat1Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetronomeStrat1 *MetronomeStrat1Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetronomeStrat1.Contract.MetronomeStrat1Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MetronomeStrat1 *MetronomeStrat1CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MetronomeStrat1.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MetronomeStrat1 *MetronomeStrat1TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetronomeStrat1.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MetronomeStrat1 *MetronomeStrat1TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MetronomeStrat1.Contract.contract.Transact(opts, method, params...)
}

// ArbGasInfo is a free data retrieval call binding the contract method 0x910956c5.
//
// Solidity: function arbGasInfo() view returns(address)
func (_MetronomeStrat1 *MetronomeStrat1Caller) ArbGasInfo(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetronomeStrat1.contract.Call(opts, &out, "arbGasInfo")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ArbGasInfo is a free data retrieval call binding the contract method 0x910956c5.
//
// Solidity: function arbGasInfo() view returns(address)
func (_MetronomeStrat1 *MetronomeStrat1Session) ArbGasInfo() (common.Address, error) {
	return _MetronomeStrat1.Contract.ArbGasInfo(&_MetronomeStrat1.CallOpts)
}

// ArbGasInfo is a free data retrieval call binding the contract method 0x910956c5.
//
// Solidity: function arbGasInfo() view returns(address)
func (_MetronomeStrat1 *MetronomeStrat1CallerSession) ArbGasInfo() (common.Address, error) {
	return _MetronomeStrat1.Contract.ArbGasInfo(&_MetronomeStrat1.CallOpts)
}

// ArbSys is a free data retrieval call binding the contract method 0x1057d40f.
//
// Solidity: function arbSys() view returns(address)
func (_MetronomeStrat1 *MetronomeStrat1Caller) ArbSys(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MetronomeStrat1.contract.Call(opts, &out, "arbSys")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ArbSys is a free data retrieval call binding the contract method 0x1057d40f.
//
// Solidity: function arbSys() view returns(address)
func (_MetronomeStrat1 *MetronomeStrat1Session) ArbSys() (common.Address, error) {
	return _MetronomeStrat1.Contract.ArbSys(&_MetronomeStrat1.CallOpts)
}

// ArbSys is a free data retrieval call binding the contract method 0x1057d40f.
//
// Solidity: function arbSys() view returns(address)
func (_MetronomeStrat1 *MetronomeStrat1CallerSession) ArbSys() (common.Address, error) {
	return _MetronomeStrat1.Contract.ArbSys(&_MetronomeStrat1.CallOpts)
}

// GetArbBlockHashAtBlockNumber is a free data retrieval call binding the contract method 0x31b92f98.
//
// Solidity: function getArbBlockHashAtBlockNumber(uint256 arbBlockNumber) view returns(bytes32, bool)
func (_MetronomeStrat1 *MetronomeStrat1Caller) GetArbBlockHashAtBlockNumber(opts *bind.CallOpts, arbBlockNumber *big.Int) ([32]byte, bool, error) {
	var out []interface{}
	err := _MetronomeStrat1.contract.Call(opts, &out, "getArbBlockHashAtBlockNumber", arbBlockNumber)

	if err != nil {
		return *new([32]byte), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetArbBlockHashAtBlockNumber is a free data retrieval call binding the contract method 0x31b92f98.
//
// Solidity: function getArbBlockHashAtBlockNumber(uint256 arbBlockNumber) view returns(bytes32, bool)
func (_MetronomeStrat1 *MetronomeStrat1Session) GetArbBlockHashAtBlockNumber(arbBlockNumber *big.Int) ([32]byte, bool, error) {
	return _MetronomeStrat1.Contract.GetArbBlockHashAtBlockNumber(&_MetronomeStrat1.CallOpts, arbBlockNumber)
}

// GetArbBlockHashAtBlockNumber is a free data retrieval call binding the contract method 0x31b92f98.
//
// Solidity: function getArbBlockHashAtBlockNumber(uint256 arbBlockNumber) view returns(bytes32, bool)
func (_MetronomeStrat1 *MetronomeStrat1CallerSession) GetArbBlockHashAtBlockNumber(arbBlockNumber *big.Int) ([32]byte, bool, error) {
	return _MetronomeStrat1.Contract.GetArbBlockHashAtBlockNumber(&_MetronomeStrat1.CallOpts, arbBlockNumber)
}

// GetArbBlockHashesAtIndex is a free data retrieval call binding the contract method 0xcc0a8e0f.
//
// Solidity: function getArbBlockHashesAtIndex(uint256 index) view returns(bytes32, bool)
func (_MetronomeStrat1 *MetronomeStrat1Caller) GetArbBlockHashesAtIndex(opts *bind.CallOpts, index *big.Int) ([32]byte, bool, error) {
	var out []interface{}
	err := _MetronomeStrat1.contract.Call(opts, &out, "getArbBlockHashesAtIndex", index)

	if err != nil {
		return *new([32]byte), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// GetArbBlockHashesAtIndex is a free data retrieval call binding the contract method 0xcc0a8e0f.
//
// Solidity: function getArbBlockHashesAtIndex(uint256 index) view returns(bytes32, bool)
func (_MetronomeStrat1 *MetronomeStrat1Session) GetArbBlockHashesAtIndex(index *big.Int) ([32]byte, bool, error) {
	return _MetronomeStrat1.Contract.GetArbBlockHashesAtIndex(&_MetronomeStrat1.CallOpts, index)
}

// GetArbBlockHashesAtIndex is a free data retrieval call binding the contract method 0xcc0a8e0f.
//
// Solidity: function getArbBlockHashesAtIndex(uint256 index) view returns(bytes32, bool)
func (_MetronomeStrat1 *MetronomeStrat1CallerSession) GetArbBlockHashesAtIndex(index *big.Int) ([32]byte, bool, error) {
	return _MetronomeStrat1.Contract.GetArbBlockHashesAtIndex(&_MetronomeStrat1.CallOpts, index)
}

// LastArbBlockNumber is a free data retrieval call binding the contract method 0x41327a8d.
//
// Solidity: function lastArbBlockNumber() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Caller) LastArbBlockNumber(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MetronomeStrat1.contract.Call(opts, &out, "lastArbBlockNumber")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastArbBlockNumber is a free data retrieval call binding the contract method 0x41327a8d.
//
// Solidity: function lastArbBlockNumber() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Session) LastArbBlockNumber() (*big.Int, error) {
	return _MetronomeStrat1.Contract.LastArbBlockNumber(&_MetronomeStrat1.CallOpts)
}

// LastArbBlockNumber is a free data retrieval call binding the contract method 0x41327a8d.
//
// Solidity: function lastArbBlockNumber() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1CallerSession) LastArbBlockNumber() (*big.Int, error) {
	return _MetronomeStrat1.Contract.LastArbBlockNumber(&_MetronomeStrat1.CallOpts)
}

// MembershipEndBlock is a free data retrieval call binding the contract method 0xb3e5316f.
//
// Solidity: function membershipEndBlock(address ) view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Caller) MembershipEndBlock(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MetronomeStrat1.contract.Call(opts, &out, "membershipEndBlock", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MembershipEndBlock is a free data retrieval call binding the contract method 0xb3e5316f.
//
// Solidity: function membershipEndBlock(address ) view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Session) MembershipEndBlock(arg0 common.Address) (*big.Int, error) {
	return _MetronomeStrat1.Contract.MembershipEndBlock(&_MetronomeStrat1.CallOpts, arg0)
}

// MembershipEndBlock is a free data retrieval call binding the contract method 0xb3e5316f.
//
// Solidity: function membershipEndBlock(address ) view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1CallerSession) MembershipEndBlock(arg0 common.Address) (*big.Int, error) {
	return _MetronomeStrat1.Contract.MembershipEndBlock(&_MetronomeStrat1.CallOpts, arg0)
}

// MiniumCost is a free data retrieval call binding the contract method 0xc61d4f38.
//
// Solidity: function miniumCost() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Caller) MiniumCost(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MetronomeStrat1.contract.Call(opts, &out, "miniumCost")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MiniumCost is a free data retrieval call binding the contract method 0xc61d4f38.
//
// Solidity: function miniumCost() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Session) MiniumCost() (*big.Int, error) {
	return _MetronomeStrat1.Contract.MiniumCost(&_MetronomeStrat1.CallOpts)
}

// MiniumCost is a free data retrieval call binding the contract method 0xc61d4f38.
//
// Solidity: function miniumCost() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1CallerSession) MiniumCost() (*big.Int, error) {
	return _MetronomeStrat1.Contract.MiniumCost(&_MetronomeStrat1.CallOpts)
}

// TotalArbBlockHashesCollected is a free data retrieval call binding the contract method 0x5f099671.
//
// Solidity: function totalArbBlockHashesCollected() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Caller) TotalArbBlockHashesCollected(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MetronomeStrat1.contract.Call(opts, &out, "totalArbBlockHashesCollected")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalArbBlockHashesCollected is a free data retrieval call binding the contract method 0x5f099671.
//
// Solidity: function totalArbBlockHashesCollected() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Session) TotalArbBlockHashesCollected() (*big.Int, error) {
	return _MetronomeStrat1.Contract.TotalArbBlockHashesCollected(&_MetronomeStrat1.CallOpts)
}

// TotalArbBlockHashesCollected is a free data retrieval call binding the contract method 0x5f099671.
//
// Solidity: function totalArbBlockHashesCollected() view returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1CallerSession) TotalArbBlockHashesCollected() (*big.Int, error) {
	return _MetronomeStrat1.Contract.TotalArbBlockHashesCollected(&_MetronomeStrat1.CallOpts)
}

// CollectArbBlockHashes is a paid mutator transaction binding the contract method 0xe66dda27.
//
// Solidity: function collectArbBlockHashes() returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Transactor) CollectArbBlockHashes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MetronomeStrat1.contract.Transact(opts, "collectArbBlockHashes")
}

// CollectArbBlockHashes is a paid mutator transaction binding the contract method 0xe66dda27.
//
// Solidity: function collectArbBlockHashes() returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1Session) CollectArbBlockHashes() (*types.Transaction, error) {
	return _MetronomeStrat1.Contract.CollectArbBlockHashes(&_MetronomeStrat1.TransactOpts)
}

// CollectArbBlockHashes is a paid mutator transaction binding the contract method 0xe66dda27.
//
// Solidity: function collectArbBlockHashes() returns(uint256)
func (_MetronomeStrat1 *MetronomeStrat1TransactorSession) CollectArbBlockHashes() (*types.Transaction, error) {
	return _MetronomeStrat1.Contract.CollectArbBlockHashes(&_MetronomeStrat1.TransactOpts)
}

// ExtendMembership is a paid mutator transaction binding the contract method 0x296f5688.
//
// Solidity: function extendMembership(address member) payable returns()
func (_MetronomeStrat1 *MetronomeStrat1Transactor) ExtendMembership(opts *bind.TransactOpts, member common.Address) (*types.Transaction, error) {
	return _MetronomeStrat1.contract.Transact(opts, "extendMembership", member)
}

// ExtendMembership is a paid mutator transaction binding the contract method 0x296f5688.
//
// Solidity: function extendMembership(address member) payable returns()
func (_MetronomeStrat1 *MetronomeStrat1Session) ExtendMembership(member common.Address) (*types.Transaction, error) {
	return _MetronomeStrat1.Contract.ExtendMembership(&_MetronomeStrat1.TransactOpts, member)
}

// ExtendMembership is a paid mutator transaction binding the contract method 0x296f5688.
//
// Solidity: function extendMembership(address member) payable returns()
func (_MetronomeStrat1 *MetronomeStrat1TransactorSession) ExtendMembership(member common.Address) (*types.Transaction, error) {
	return _MetronomeStrat1.Contract.ExtendMembership(&_MetronomeStrat1.TransactOpts, member)
}

// MetronomeStrat1GasReturnIterator is returned from FilterGasReturn and is used to iterate over the raw logs and unpacked data for GasReturn events raised by the MetronomeStrat1 contract.
type MetronomeStrat1GasReturnIterator struct {
	Event *MetronomeStrat1GasReturn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetronomeStrat1GasReturnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetronomeStrat1GasReturn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetronomeStrat1GasReturn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetronomeStrat1GasReturnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetronomeStrat1GasReturnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetronomeStrat1GasReturn represents a GasReturn event raised by the MetronomeStrat1 contract.
type MetronomeStrat1GasReturn struct {
	Member common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterGasReturn is a free log retrieval operation binding the contract event 0x3345c23bde8834073ec0482c997df63a2717b52827fa8d995aaf07cadf7f4a11.
//
// Solidity: event GasReturn(address indexed member, uint256 indexed amount)
func (_MetronomeStrat1 *MetronomeStrat1Filterer) FilterGasReturn(opts *bind.FilterOpts, member []common.Address, amount []*big.Int) (*MetronomeStrat1GasReturnIterator, error) {

	var memberRule []interface{}
	for _, memberItem := range member {
		memberRule = append(memberRule, memberItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _MetronomeStrat1.contract.FilterLogs(opts, "GasReturn", memberRule, amountRule)
	if err != nil {
		return nil, err
	}
	return &MetronomeStrat1GasReturnIterator{contract: _MetronomeStrat1.contract, event: "GasReturn", logs: logs, sub: sub}, nil
}

// WatchGasReturn is a free log subscription operation binding the contract event 0x3345c23bde8834073ec0482c997df63a2717b52827fa8d995aaf07cadf7f4a11.
//
// Solidity: event GasReturn(address indexed member, uint256 indexed amount)
func (_MetronomeStrat1 *MetronomeStrat1Filterer) WatchGasReturn(opts *bind.WatchOpts, sink chan<- *MetronomeStrat1GasReturn, member []common.Address, amount []*big.Int) (event.Subscription, error) {

	var memberRule []interface{}
	for _, memberItem := range member {
		memberRule = append(memberRule, memberItem)
	}
	var amountRule []interface{}
	for _, amountItem := range amount {
		amountRule = append(amountRule, amountItem)
	}

	logs, sub, err := _MetronomeStrat1.contract.WatchLogs(opts, "GasReturn", memberRule, amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetronomeStrat1GasReturn)
				if err := _MetronomeStrat1.contract.UnpackLog(event, "GasReturn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGasReturn is a log parse operation binding the contract event 0x3345c23bde8834073ec0482c997df63a2717b52827fa8d995aaf07cadf7f4a11.
//
// Solidity: event GasReturn(address indexed member, uint256 indexed amount)
func (_MetronomeStrat1 *MetronomeStrat1Filterer) ParseGasReturn(log types.Log) (*MetronomeStrat1GasReturn, error) {
	event := new(MetronomeStrat1GasReturn)
	if err := _MetronomeStrat1.contract.UnpackLog(event, "GasReturn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MetronomeStrat1MembershipExtensionIterator is returned from FilterMembershipExtension and is used to iterate over the raw logs and unpacked data for MembershipExtension events raised by the MetronomeStrat1 contract.
type MetronomeStrat1MembershipExtensionIterator struct {
	Event *MetronomeStrat1MembershipExtension // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MetronomeStrat1MembershipExtensionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MetronomeStrat1MembershipExtension)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MetronomeStrat1MembershipExtension)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MetronomeStrat1MembershipExtensionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MetronomeStrat1MembershipExtensionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MetronomeStrat1MembershipExtension represents a MembershipExtension event raised by the MetronomeStrat1 contract.
type MetronomeStrat1MembershipExtension struct {
	Member   common.Address
	EndBlock *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMembershipExtension is a free log retrieval operation binding the contract event 0xc428cf78953ea4aa7889c5c72e87f71a7567a272548edc843376703ece66b9ac.
//
// Solidity: event MembershipExtension(address indexed member, uint256 indexed endBlock)
func (_MetronomeStrat1 *MetronomeStrat1Filterer) FilterMembershipExtension(opts *bind.FilterOpts, member []common.Address, endBlock []*big.Int) (*MetronomeStrat1MembershipExtensionIterator, error) {

	var memberRule []interface{}
	for _, memberItem := range member {
		memberRule = append(memberRule, memberItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}

	logs, sub, err := _MetronomeStrat1.contract.FilterLogs(opts, "MembershipExtension", memberRule, endBlockRule)
	if err != nil {
		return nil, err
	}
	return &MetronomeStrat1MembershipExtensionIterator{contract: _MetronomeStrat1.contract, event: "MembershipExtension", logs: logs, sub: sub}, nil
}

// WatchMembershipExtension is a free log subscription operation binding the contract event 0xc428cf78953ea4aa7889c5c72e87f71a7567a272548edc843376703ece66b9ac.
//
// Solidity: event MembershipExtension(address indexed member, uint256 indexed endBlock)
func (_MetronomeStrat1 *MetronomeStrat1Filterer) WatchMembershipExtension(opts *bind.WatchOpts, sink chan<- *MetronomeStrat1MembershipExtension, member []common.Address, endBlock []*big.Int) (event.Subscription, error) {

	var memberRule []interface{}
	for _, memberItem := range member {
		memberRule = append(memberRule, memberItem)
	}
	var endBlockRule []interface{}
	for _, endBlockItem := range endBlock {
		endBlockRule = append(endBlockRule, endBlockItem)
	}

	logs, sub, err := _MetronomeStrat1.contract.WatchLogs(opts, "MembershipExtension", memberRule, endBlockRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MetronomeStrat1MembershipExtension)
				if err := _MetronomeStrat1.contract.UnpackLog(event, "MembershipExtension", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMembershipExtension is a log parse operation binding the contract event 0xc428cf78953ea4aa7889c5c72e87f71a7567a272548edc843376703ece66b9ac.
//
// Solidity: event MembershipExtension(address indexed member, uint256 indexed endBlock)
func (_MetronomeStrat1 *MetronomeStrat1Filterer) ParseMembershipExtension(log types.Log) (*MetronomeStrat1MembershipExtension, error) {
	event := new(MetronomeStrat1MembershipExtension)
	if err := _MetronomeStrat1.contract.UnpackLog(event, "MembershipExtension", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func CreateMetronomeStrat1DeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int
	var calldata bool

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {

			if !calldata {
				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			// Generate deploy bytecode with constructor arguments
			deployCalldata, err := generateMetronomeStrat1DeployBytecode()
			if err != nil {
				return fmt.Errorf("failed to generate deploy bytecode: %v", err)
			}

			if calldata {
				deployCalldataHex := hex.EncodeToString(deployCalldata)
				cmd.Println(deployCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployCalldata)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployCalldata, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployMetronomeStrat1(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	return cmd
}

func generateMetronomeStrat1DeployBytecode() ([]byte, error) {
	abiPacked, err := MetronomeStrat1MetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("")
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(MetronomeStrat1MetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateArbGasInfoCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "arb-gas-info",
		Short: "Call the ArbGasInfo view method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeStrat1CallerSession{
				Contract: &contract.MetronomeStrat1Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ArbGasInfo()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateArbSysCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 common.Address

	cmd := &cobra.Command{
		Use:   "arb-sys",
		Short: "Call the ArbSys view method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeStrat1CallerSession{
				Contract: &contract.MetronomeStrat1Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.ArbSys()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.Hex())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateGetArbBlockHashAtBlockNumberCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arbBlockNumber *big.Int
	var arbBlockNumberRaw string

	var capture0 [32]byte
	var capture1 bool

	cmd := &cobra.Command{
		Use:   "get-arb-block-hash-at-block-number",
		Short: "Call the GetArbBlockHashAtBlockNumber view method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arbBlockNumberRaw == "" {
				return fmt.Errorf("--arb-block-number argument not specified")
			}
			arbBlockNumber = new(big.Int)
			arbBlockNumber.SetString(arbBlockNumberRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeStrat1CallerSession{
				Contract: &contract.MetronomeStrat1Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, capture1, callErr = session.GetArbBlockHashAtBlockNumber(
				arbBlockNumber,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)
			cmd.Printf("1: %t\n", capture1)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arbBlockNumberRaw, "arb-block-number", "", "arb-block-number argument")

	return cmd
}
func CreateGetArbBlockHashesAtIndexCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var index *big.Int
	var indexRaw string

	var capture0 [32]byte
	var capture1 bool

	cmd := &cobra.Command{
		Use:   "get-arb-block-hashes-at-index",
		Short: "Call the GetArbBlockHashesAtIndex view method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if indexRaw == "" {
				return fmt.Errorf("--index argument not specified")
			}
			index = new(big.Int)
			index.SetString(indexRaw, 0)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeStrat1CallerSession{
				Contract: &contract.MetronomeStrat1Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, capture1, callErr = session.GetArbBlockHashesAtIndex(
				index,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %v\n", capture0)
			cmd.Printf("1: %t\n", capture1)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&indexRaw, "index", "", "index argument")

	return cmd
}
func CreateLastArbBlockNumberCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "last-arb-block-number",
		Short: "Call the LastArbBlockNumber view method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeStrat1CallerSession{
				Contract: &contract.MetronomeStrat1Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.LastArbBlockNumber()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateMembershipEndBlockCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var arg0 common.Address
	var arg0Raw string

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "membership-end-block",
		Short: "Call the MembershipEndBlock view method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if arg0Raw == "" {
				return fmt.Errorf("--arg-0 argument not specified")
			} else if !common.IsHexAddress(arg0Raw) {
				return fmt.Errorf("--arg-0 argument is not a valid Ethereum address")
			}
			arg0 = common.HexToAddress(arg0Raw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeStrat1CallerSession{
				Contract: &contract.MetronomeStrat1Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.MembershipEndBlock(
				arg0,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&arg0Raw, "arg-0", "", "arg-0 argument (common.Address)")

	return cmd
}
func CreateMiniumCostCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "minium-cost",
		Short: "Call the MiniumCost view method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeStrat1CallerSession{
				Contract: &contract.MetronomeStrat1Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.MiniumCost()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}
func CreateTotalArbBlockHashesCollectedCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var capture0 *big.Int

	cmd := &cobra.Command{
		Use:   "total-arb-block-hashes-collected",
		Short: "Call the TotalArbBlockHashesCollected view method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := MetronomeStrat1CallerSession{
				Contract: &contract.MetronomeStrat1Caller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.TotalArbBlockHashesCollected()
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0.String())

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	return cmd
}

func CreateCollectArbBlockHashesCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	cmd := &cobra.Command{
		Use:   "collect-arb-block-hashes",
		Short: "Execute the CollectArbBlockHashes method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := MetronomeStrat1MetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "collectArbBlockHashes"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeStrat1TransactorSession{
				Contract:     &contract.MetronomeStrat1Transactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.CollectArbBlockHashes()
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	return cmd
}
func CreateExtendMembershipCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc, contractAddressRaw, safeFunction, safeNonceRaw string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var contractAddress common.Address
	var safeAddress, safeApi string
	var safeOperationType uint8
	var safeNonce *big.Int
	var calldata bool

	var member common.Address
	var memberRaw string

	cmd := &cobra.Command{
		Use:   "extend-membership",
		Short: "Execute the ExtendMembership method on a MetronomeStrat1 contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if !calldata {
				if contractAddressRaw == "" {
					return fmt.Errorf("--contract not specified")
				} else if !common.IsHexAddress(contractAddressRaw) {
					return fmt.Errorf("--contract is not a valid Ethereum address")
				}
				contractAddress = common.HexToAddress(contractAddressRaw)

				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			if memberRaw == "" {
				return fmt.Errorf("--member argument not specified")
			} else if !common.IsHexAddress(memberRaw) {
				return fmt.Errorf("--member argument is not a valid Ethereum address")
			}
			member = common.HexToAddress(memberRaw)

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			abi, err := MetronomeStrat1MetaData.GetAbi()
			if err != nil {
				return fmt.Errorf("failed to get ABI: %v", err)
			}

			// Generate transaction data (override method name if safe function is specified)
			methodName := "extendMembership"
			if safeFunction != "" {
				methodName = safeFunction
			}

			txCalldata, err := abi.Pack(
				methodName,
				member,
			)

			if err != nil {
				return err
			}

			if calldata {
				txCalldataHex := hex.EncodeToString(txCalldata)
				cmd.Println(txCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			contract, contractErr := NewMetronomeStrat1(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			session := MetronomeStrat1TransactorSession{
				Contract:     &contract.MetronomeStrat1Transactor,
				TransactOpts: *transactionOpts,
			}

			if safeAddress != "" {
				// Create Safe proposal for transaction
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				err = CreateSafeProposal(client, key, common.HexToAddress(safeAddress), contractAddress, txCalldata, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
				if err != nil {
					return fmt.Errorf("failed to create Safe proposal: %v", err)
				}

				return nil
			}

			transaction, err := session.ExtendMembership(

				member,
			)
			if err != nil {
				return err
			}

			cmd.Printf("Transaction hash: %s\n", transaction.Hash().Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					To:   &contractAddress,
					Data: transaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := transaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 0, "Safe operation type: 0 (Call) or 1 (DelegateCall)")
	cmd.Flags().StringVar(&safeFunction, "safe-function", "", "Safe function overrider to use for the transaction (optional)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	cmd.Flags().StringVar(&memberRaw, "member", "", "member argument (common.Address)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the METRONOME_STRAT_1_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the METRONOME_STRAT_1_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("METRONOME_STRAT_1_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateMetronomeStrat1Command() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "metronome-strat-1",
		Short: "Interact with the MetronomeStrat1 contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployMetronomeStrat1 := CreateMetronomeStrat1DeploymentCommand()
	cmdDeployMetronomeStrat1.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployMetronomeStrat1)

	cmdViewArbGasInfo := CreateArbGasInfoCommand()
	cmdViewArbGasInfo.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewArbGasInfo)
	cmdViewArbSys := CreateArbSysCommand()
	cmdViewArbSys.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewArbSys)
	cmdViewGetArbBlockHashAtBlockNumber := CreateGetArbBlockHashAtBlockNumberCommand()
	cmdViewGetArbBlockHashAtBlockNumber.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetArbBlockHashAtBlockNumber)
	cmdViewGetArbBlockHashesAtIndex := CreateGetArbBlockHashesAtIndexCommand()
	cmdViewGetArbBlockHashesAtIndex.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewGetArbBlockHashesAtIndex)
	cmdViewLastArbBlockNumber := CreateLastArbBlockNumberCommand()
	cmdViewLastArbBlockNumber.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewLastArbBlockNumber)
	cmdViewMembershipEndBlock := CreateMembershipEndBlockCommand()
	cmdViewMembershipEndBlock.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewMembershipEndBlock)
	cmdViewMiniumCost := CreateMiniumCostCommand()
	cmdViewMiniumCost.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewMiniumCost)
	cmdViewTotalArbBlockHashesCollected := CreateTotalArbBlockHashesCollectedCommand()
	cmdViewTotalArbBlockHashesCollected.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewTotalArbBlockHashesCollected)

	cmdTransactCollectArbBlockHashes := CreateCollectArbBlockHashesCommand()
	cmdTransactCollectArbBlockHashes.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactCollectArbBlockHashes)
	cmdTransactExtendMembership := CreateExtendMembershipCommand()
	cmdTransactExtendMembership.GroupID = TransactGroup.ID
	cmd.AddCommand(cmdTransactExtendMembership)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}
