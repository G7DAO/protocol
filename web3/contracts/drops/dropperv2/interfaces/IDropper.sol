// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.9;

// Interface generated by solface: https://github.com/bugout-dev/solface
// solface version: 0.0.4
interface IDropper {
    // structs
    struct Compound0 {
        uint256 tokenType;
        address tokenAddress;
        uint256 tokenId;
        uint256 amount;
    }
    struct Compound1 {
        address terminusAddress;
        uint256 poolId;
    }

    // events
    event Claimed(uint256 dropId, address claimant, address signer, uint256 requestID, uint256 amount);
    event DropAuthorizationChanged(uint256 dropId, address terminusAddress, uint256 poolId);
    event DropCreated(uint256 dropId, uint256 tokenType, address tokenAddress, uint256 tokenId, uint256 amount);
    event DropStatusChanged(uint256 dropId, bool status);
    event DropURIChanged(uint256 dropId, string uri);
    event Withdrawal(address recipient, uint256 tokenType, address tokenAddress, uint256 tokenId, uint256 amount);

    // functions
    function claim(
        uint256 dropId,
        uint256 requestID,
        uint256 blockDeadline,
        uint256 amount,
        address signer,
        bytes memory signature
    ) external;

    function claimMessageHash(
        uint256 dropId,
        uint256 requestID,
        address claimant,
        uint256 blockDeadline,
        uint256 amount
    ) external view returns (bytes32);

    function claimStatus(uint256 dropId, uint256 requestId) external view returns (bool);

    function createDrop(
        uint256 tokenType,
        address tokenAddress,
        uint256 tokenId,
        uint256 amount,
        address authorizationTokenAddress,
        uint256 authorizationPoolId,
        string memory uri
    ) external returns (uint256);

    function dropStatus(uint256 dropId) external view returns (bool);

    function dropUri(uint256 dropId) external view returns (string memory);

    function dropperVersion() external view returns (string memory, string memory);

    function erc1155_type() external view returns (uint256);

    function erc20_type() external view returns (uint256);

    function erc721_type() external view returns (uint256);

    function getDrop(uint256 dropId) external view returns (Compound0 memory);

    function getDropAuthorization(uint256 dropId) external view returns (Compound1 memory);

    function init(address terminusAdminContractAddress, uint256 terminusAdminPoolID) external;

    function numDrops() external view returns (uint256);

    function onERC1155BatchReceived(
        address,
        address,
        uint256[] memory,
        uint256[] memory,
        bytes memory
    ) external returns (bytes4);

    function onERC1155Received(address, address, uint256, uint256, bytes memory) external returns (bytes4);

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes memory data
    ) external returns (bytes4);

    function setDropAuthorization(uint256 dropId, address terminusAddress, uint256 poolId) external;

    function setDropStatus(uint256 dropId, bool status) external;

    function setDropUri(uint256 dropId, string memory uri) external;

    function supportsInterface(bytes4 interfaceId) external view returns (bool);

    function surrenderPoolControl(uint256 poolId, address terminusAddress, address newPoolController) external;

    function terminus_mintable_type() external view returns (uint256);

    function withdrawERC1155(address tokenAddress, uint256 tokenId, uint256 amount) external;

    function withdrawERC20(address tokenAddress, uint256 amount) external;

    function withdrawERC721(address tokenAddress, uint256 tokenId) external;

    // errors
}
